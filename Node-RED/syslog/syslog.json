[
    {
        "id": "fd36bbc4.fe50d8",
        "type": "subflow",
        "name": "OK/Cancel helper",
        "info": "# OK/Cancel dialog helper\n\n## description\n\nThis is a little helper to make OK/Cancel dialogs easy to implement inside a data stream\n\n## how it works\n\nIf a message arrives at the **imput** a message dialog box is triggered. The original Message is cloned into `msg.dialogHelperOrgMsg`. If the dialog sends `msg.payload` with the **passPayload** the original message is released on the second output.\n\n## configuration\n\n- **Title** ***optional** a string displayed on the title of the dialog\n- **Message** message to be displayed\n- **passPayload** the `msg.payload` expected on the imput to release to original message.",
        "category": "",
        "in": [
            {
                "x": 37,
                "y": 85,
                "wires": [
                    {
                        "id": "6a44f1d4.72a75"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 343,
                "y": 85,
                "wires": [
                    {
                        "id": "6a44f1d4.72a75",
                        "port": 1
                    }
                ]
            },
            {
                "x": 343,
                "y": 136,
                "wires": [
                    {
                        "id": "6a44f1d4.72a75",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "title",
                "type": "str",
                "value": "Please Confirm",
                "ui": {
                    "icon": "font-awesome/fa-comment",
                    "label": {
                        "en-US": "Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "message",
                "type": "str",
                "value": "should the message pass on?",
                "ui": {
                    "icon": "font-awesome/fa-comment-o",
                    "label": {
                        "en-US": "Message"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "passPayload",
                "type": "str",
                "value": "OK",
                "ui": {
                    "icon": "font-awesome/fa-check-square-o",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "font-awesome/fa-comments-o",
        "status": {
            "x": 343,
            "y": 34,
            "wires": [
                {
                    "id": "6a44f1d4.72a75",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6a44f1d4.72a75",
        "type": "function",
        "z": "fd36bbc4.fe50d8",
        "name": "confirm",
        "func": "var status={fill:\"\",shape:\"dot\",text:\"\"};\nif (msg!==undefined && !msg.hasOwnProperty(\"dialogHelperOrgMsg\")) { // no message in queue\n    var dialogMsg={\n        topic:env.get('title'),\n        payload:env.get('message'),\n        socketid:msg.socketid,\n        dialogHelperOrgMsg:RED.util.cloneMessage(msg)\n    };\n    status={fill:\"yellow\",shape:\"dot\",text:\"waiting for response\"};\n    return [{payload:status},dialogMsg,null];\n} else {\n    if (msg.payload===env.get('passPayload')) {\n        status={fill:\"green\",shape:\"dot\",text:\"message passed\"};\n        return [{payload:status},null,msg.dialogHelperOrgMsg];\n    } else {\n        status={fill:\"blue\",shape:\"dot\",text:msg.payload+\" (!\"+env.get('passPayload')+\") message droped\"};\n        return [{payload:status},null,null];\n    }\n}",
        "outputs": 3,
        "noerr": 0,
        "x": 196,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "info": "# OK/Cancel dialog helper function\n\n## description\n\nThis is a little helper to make OK/Cancel dialogs easy to implement inside a data stream\n\n## how it works\n\nIf a message arrives at the **imput** a message dialog box is triggered. The original Message is cloned into `msg.dialogHelperOrgMsg`. If the dialog sends `msg.payload` with the **passPayload** the original message is released on the second output.\n\n## envioment variables\n\n- **title** ***optional** a string displayed on the title of the dialog\n- **message** message to be displayed\n- **passPayload** the `msg.payload` expected on the imput to release to original message."
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\nsend an object containing the updated properties of a table row by sending msg.<tableDataProp>.\n\nThe table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. for tis to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `object` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `object` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `object` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `object` matching column field\n- `columnUnHide` unhide a column. `object` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore`set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n \n## background\nui-table warps the powerfull tabluator library. This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "bool",
                            "env"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n    \n// deep search for a column\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).lenght===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && msg.topic-maxRows>0) {\n        node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [msg.topic-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\")) {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.payload.object;\n                maxStore=msg.payload.object;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.payload.object;\n                maxRows=msg.payload.object;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n    msg.payload=[];\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                msg.payload.push(tableRow);\n            } else {\n                msg.payload.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    \n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    status.fill=\"blue\";\n    status.text+=\" \"+msg.payload.length+\" rows restored\";\n    return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"unknown callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                tableData[msg[tableIndex]][msg.field] = msg.payload; // overwrite tableData with edit\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n}\n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "1e193208.71985e",
        "type": "tab",
        "label": "SysLog",
        "disabled": false,
        "info": "# ui-table with ui_controll and command transmission\n## ui_control\npress the inject button on either \n- payload or\n- ui_controll\n\n## msg.payload.command / msg.payload.arguments\nsend commands to ui-table. ui-table by default expects an array with the complete table data as msg.payload. If you send an object containing:\n- `msg.payload.command` _[string]_ the command\n- `msg.payload.arguments` _[array]_ an array of arguments for the command\nit is possible to send commands to the table to i.e. update single rowas or add data"
    },
    {
        "id": "bc43cef0.26fe4",
        "type": "inject",
        "z": "1e193208.71985e",
        "name": "demo data",
        "topic": "",
        "payload": "{\"facility\":\"daemon\",\"facilityCode\":3,\"severity\":\"info\",\"severityCode\":6,\"tag\":\"systemd[1]\",\"timestamp\":\"2018-12-26T17:53:57.000Z\",\"hostname\":\"localhost\",\"address\":\"127.0.0.1\",\"family\":\"IPv4\",\"port\":38514,\"size\":80,\"msg\":\"some demo data\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 111,
        "y": 578,
        "wires": [
            [
                "a9488f13.da034"
            ]
        ]
    },
    {
        "id": "bec529cb.a9bfc8",
        "type": "ui_dropdown",
        "z": "1e193208.71985e",
        "name": "filterString",
        "label": "Filter Host",
        "tooltip": "",
        "place": "Select Host",
        "group": "51ce6aa1.620754",
        "order": 1,
        "width": "7",
        "height": 1,
        "passthru": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "filterString",
        "x": 315,
        "y": 782,
        "wires": [
            [
                "34ef0e0a.606632"
            ]
        ]
    },
    {
        "id": "938f3076.e84a8",
        "type": "ui_button",
        "z": "1e193208.71985e",
        "name": "deleteTable",
        "group": "51ce6aa1.620754",
        "order": 5,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "deleteTable",
        "payloadType": "str",
        "topic": "deleteTable",
        "x": 325,
        "y": 731,
        "wires": [
            [
                "728e9362.ae89fc"
            ]
        ]
    },
    {
        "id": "2b9bc827.b69618",
        "type": "ui_numeric",
        "z": "1e193208.71985e",
        "name": "setMaxStore",
        "label": "max Store:",
        "tooltip": "maximum amount of rows to be saved in context store (limited by server)",
        "group": "51ce6aa1.620754",
        "order": 2,
        "width": "4",
        "height": 1,
        "wrap": false,
        "passthru": false,
        "topic": "setMaxStore",
        "format": "{{value}}",
        "min": "10",
        "max": "200",
        "step": "10",
        "x": 325,
        "y": 901,
        "wires": [
            [
                "c58cb32.f70fd5"
            ]
        ]
    },
    {
        "id": "c58cb32.f70fd5",
        "type": "change",
        "z": "1e193208.71985e",
        "name": "topic2command",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.object",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "topic",
                "pt": "msg",
                "to": "payload.command",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 901,
        "wires": [
            [
                "43a4caa3.06c034"
            ]
        ]
    },
    {
        "id": "43a4caa3.06c034",
        "type": "link out",
        "z": "1e193208.71985e",
        "name": "uiControlSettings",
        "links": [
            "41b7f798.8e6a48"
        ],
        "x": 729,
        "y": 901,
        "wires": []
    },
    {
        "id": "41b7f798.8e6a48",
        "type": "link in",
        "z": "1e193208.71985e",
        "name": "uiControlSettings",
        "links": [
            "43a4caa3.06c034"
        ],
        "x": 491,
        "y": 612,
        "wires": [
            [
                "37011a9c.a1d406"
            ]
        ]
    },
    {
        "id": "84e7d923.efb4d8",
        "type": "ui_numeric",
        "z": "1e193208.71985e",
        "name": "setMaxRows",
        "label": "max Display:",
        "tooltip": "maximum amount of rows to be displayed (limited by client memory)",
        "group": "51ce6aa1.620754",
        "order": 3,
        "width": "5",
        "height": 1,
        "wrap": false,
        "passthru": false,
        "topic": "setMaxRows",
        "format": "{{value}}",
        "min": "10",
        "max": "1000",
        "step": "10",
        "x": 325,
        "y": 952,
        "wires": [
            [
                "c58cb32.f70fd5"
            ]
        ]
    },
    {
        "id": "c2999e05.72156",
        "type": "ui_switch",
        "z": "1e193208.71985e",
        "name": "recordActive",
        "label": "",
        "tooltip": "",
        "group": "51ce6aa1.620754",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "recordActive",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 325,
        "y": 833,
        "wires": [
            [
                "34ef0e0a.606632"
            ]
        ]
    },
    {
        "id": "6dbb0f83.0bf06",
        "type": "syslog-input",
        "z": "1e193208.71985e",
        "name": "syslog",
        "socktype": "udp",
        "address": "",
        "port": "514",
        "topic": "",
        "x": 118,
        "y": 476,
        "wires": [
            [
                "a9488f13.da034"
            ]
        ]
    },
    {
        "id": "d40d9af8.58f218",
        "type": "ui_ui_control",
        "z": "1e193208.71985e",
        "name": "",
        "events": "change",
        "x": 298,
        "y": 476,
        "wires": [
            [
                "37011a9c.a1d406"
            ]
        ]
    },
    {
        "id": "37011a9c.a1d406",
        "type": "subflow:2924702c.b33a7",
        "z": "1e193208.71985e",
        "name": "",
        "env": [
            {
                "name": "tabulator",
                "value": "{\"tabulator\":{\"columnResized\":\"function(column){  var newColumn = {         title:column._column.definition.title,field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"columnMoved = function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"groupHeader\":\"function (value, count, data, group) {return value + \\\"<span style='color:#d00; margin-left:10px;'>(\\\" + count + \\\" Termostat\\\"+((count>1) ? \\\"e\\\" : \\\"\\\") + \\\")</span>\\\";}\",\"columns\":[{\"title\":\"Id\",\"field\":\"id\",\"width\":100},{\"title\":\"Time\",\"field\":\"timestamp\",\"width\":100,\"formatter\":\"datetime\",\"formatterParams\":{\"inputFormat\":\"YYYY-MM-DD HH:mm:ss.SSS\",\"outputFormat\":\"HH:mm:ss\",\"invalidPlaceholder\":\"(invalid time)\"}},{\"title\":\"Hostname\",\"field\":\"hostname\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"title\":\"Message\",\"field\":\"msg\",\"width\":100,\"headerFilter\":true},{\"title\":\"Tag\",\"field\":\"tag\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"title\":\"Date\",\"field\":\"timestamp\",\"width\":100,\"formatter\":\"datetime\",\"formatterParams\":{\"inputFormat\":\"YYYY-MM-DD HH:mm:ss.SSS\",\"outputFormat\":\"DD.MM.YY\",\"invalidPlaceholder\":\"(invalid Date)\"}},{\"title\":\"Facility\",\"columns\":[{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Code\",\"field\":\"facilityCode\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Name\",\"field\":\"facility\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}}]},{\"title\":\"Severity\",\"columns\":[{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Code\",\"field\":\"severityCode\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Severty\",\"field\":\"severity\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}}]},{\"title\":\"Client\",\"columns\":[{\"title\":\"Address\",\"field\":\"address\",\"width\":100,\"formatter\":\"link\",\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true},\"formatterParams\":{\"urlPrefix\":\"http://\",\"target\":\"_blank\"}},{\"title\":\"Port\",\"field\":\"port\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"title\":\"Protocol\",\"field\":\"family\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}}]}],\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\"},\"customHeight\":20}",
                "type": "json"
            },
            {
                "name": "tableDataProp",
                "value": "log",
                "type": "str"
            },
            {
                "name": "tableIndex",
                "value": "id",
                "type": "str"
            },
            {
                "name": "maxRows",
                "value": "200",
                "type": "num"
            },
            {
                "name": "maxStore",
                "value": "50",
                "type": "num"
            },
            {
                "name": "dashboard",
                "value": "Syslog Server",
                "type": "str"
            },
            {
                "name": "tableContext",
                "value": "{\"tableData\":{\"name\":\"tableData\",\"storage\":\"memoryOnly\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "type": "json"
            }
        ],
        "x": 641,
        "y": 527,
        "wires": [
            [
                "447422c7.ba384c"
            ],
            [
                "a977d399.94817"
            ]
        ]
    },
    {
        "id": "447422c7.ba384c",
        "type": "ui_table",
        "z": "1e193208.71985e",
        "group": "51ce6aa1.620754",
        "name": "",
        "order": 7,
        "width": "19",
        "height": "10",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 849,
        "y": 425,
        "wires": [
            [
                "3f95e8d8.97a5c8"
            ]
        ]
    },
    {
        "id": "3f95e8d8.97a5c8",
        "type": "switch",
        "z": "1e193208.71985e",
        "name": "filter callbacks",
        "property": "$exists(ui_control)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1015,
        "y": 425,
        "wires": [
            [
                "36ac3a9b.64eea6"
            ],
            [
                "37011a9c.a1d406",
                "35ea48a7.76a208"
            ]
        ]
    },
    {
        "id": "36ac3a9b.64eea6",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "clicked on cell",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1236,
        "y": 408,
        "wires": []
    },
    {
        "id": "35ea48a7.76a208",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "table callback",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1236,
        "y": 442,
        "wires": []
    },
    {
        "id": "a9488f13.da034",
        "type": "function",
        "z": "1e193208.71985e",
        "name": "feed table",
        "func": "if (msg.topic==='deleteTable') {\n    context.set('filterString','[all]');\n    context.set('hosts',undefined);\n    return [{payload:{command:'deleteTable'}},{options:['all']}];\n}\nif (msg.topic==='filterString') {\n    context.set('filterString',msg.payload);\n    node.status({fill:\"yellow\", shape:\"dot\", text:\"filter: \"+msg.payload})\n    return\n}\nif (msg.topic==='recordActive') {\n    context.set('recordActive',msg.payload);\n    if (!msg.payload) node.status({fill:\"red\", shape:\"dot\", text:\"stopped\"})\n    else node.status({fill:\"green\", shape:\"dot\", text:\"running\"})\n    return\n}\nif (!context.get('recordActive')) return;\n\nvar counter = context.get(\"counter\") || 0;\ncounter++;\ncontext.set(\"counter\",counter);\n// ----------------------------------------------------------------------------\n// make some adjustements to the incomming data when nessesary here\n// ----------------------------------------------------------------------------\n\n// update adjust timestamp to local timezone\nvar timestamp= new Date(Date.now());\ntimestamp= new Date(timestamp.getTime() - timestamp.getTimezoneOffset() * 60000);\nmsg.payload.timestamp= timestamp.toISOString();\n\n// correct host name (ESPEasy adds <#> infront where # is the severty code)\nif (msg.payload.hostname.startsWith('<')) {\n    msg.payload.hostname=msg.payload.hostname.slice(msg.payload.hostname.indexOf('>')+1);\n}\n\nvar filterString = context.get(\"filterString\") || '[all]';\nif (filterString!=='[all]' && filterString!==msg.payload.hostname) return;\n\nvar hosts = context.get(\"hosts\") || ['[all]'];\nif (!hosts.includes(msg.payload.hostname)) {\n    hosts.push(msg.payload.hostname);\n    hosts.sort();\n    context.set(\"hosts\",hosts);\n    node.send([null,{topic:\"filterOptions\",options:hosts}]);\n}\n\nmsg.log=RED.util.cloneMessage(msg.payload);\nmsg.log.id=counter;\nmsg.topic=counter;\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\ndelete msg.payload;\n\nreturn [msg,null];",
        "outputs": 2,
        "noerr": 0,
        "x": 298,
        "y": 527,
        "wires": [
            [
                "6de66dc3.dc6464",
                "37011a9c.a1d406"
            ],
            [
                "efd16191.6875e"
            ]
        ],
        "outputLabels": [
            "to table-handler",
            "to host dropdown"
        ]
    },
    {
        "id": "6de66dc3.dc6464",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "feed Table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 631,
        "y": 578,
        "wires": []
    },
    {
        "id": "91f305d4.637238",
        "type": "ui_toast",
        "z": "1e193208.71985e",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "OK / Cancel",
        "x": 750,
        "y": 680,
        "wires": [
            [
                "728e9362.ae89fc"
            ]
        ]
    },
    {
        "id": "728e9362.ae89fc",
        "type": "subflow:fd36bbc4.fe50d8",
        "z": "1e193208.71985e",
        "name": "delete Table?",
        "env": [
            {
                "name": "message",
                "value": "Do you like to delete all records?",
                "type": "str"
            }
        ],
        "x": 537,
        "y": 731,
        "wires": [
            [
                "91f305d4.637238"
            ],
            [
                "34ef0e0a.606632"
            ]
        ]
    },
    {
        "id": "fa69b97c.ad7498",
        "type": "link in",
        "z": "1e193208.71985e",
        "name": "to preprocessor",
        "links": [
            "34ef0e0a.606632"
        ],
        "x": 151,
        "y": 527,
        "wires": [
            [
                "a9488f13.da034"
            ]
        ]
    },
    {
        "id": "34ef0e0a.606632",
        "type": "link out",
        "z": "1e193208.71985e",
        "name": "preprocessor",
        "links": [
            "fa69b97c.ad7498"
        ],
        "x": 729,
        "y": 782,
        "wires": []
    },
    {
        "id": "f66c3ea8.1d7b6",
        "type": "switch",
        "z": "1e193208.71985e",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "filterOptions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "maxStore",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "maxRows",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 152,
        "y": 918,
        "wires": [
            [
                "bec529cb.a9bfc8"
            ],
            [
                "2b9bc827.b69618"
            ],
            [
                "84e7d923.efb4d8"
            ]
        ]
    },
    {
        "id": "a977d399.94817",
        "type": "link out",
        "z": "1e193208.71985e",
        "name": "dashboard",
        "links": [
            "459a46b0.a86bf8"
        ],
        "x": 814,
        "y": 578,
        "wires": []
    },
    {
        "id": "459a46b0.a86bf8",
        "type": "link in",
        "z": "1e193208.71985e",
        "name": "daschboard",
        "links": [
            "a977d399.94817",
            "efd16191.6875e"
        ],
        "x": 66,
        "y": 918,
        "wires": [
            [
                "f66c3ea8.1d7b6"
            ]
        ]
    },
    {
        "id": "efd16191.6875e",
        "type": "link out",
        "z": "1e193208.71985e",
        "name": "dashboard",
        "links": [
            "459a46b0.a86bf8"
        ],
        "x": 440,
        "y": 612,
        "wires": []
    },
    {
        "id": "51ce6aa1.620754",
        "type": "ui_group",
        "z": "",
        "name": "Syslog Server",
        "tab": "7653f2c6.4b174c",
        "order": 1,
        "disp": true,
        "width": "19",
        "collapse": false
    },
    {
        "id": "7653f2c6.4b174c",
        "type": "ui_tab",
        "z": "",
        "name": "Syslog Server",
        "icon": "table",
        "order": 18,
        "disabled": false,
        "hidden": false
    }
]